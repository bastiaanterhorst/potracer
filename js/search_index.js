var search_data = {"index":{"searchIndex":["potracer","bitmap","params","trace","turnpolicy","alpha_max()","alpha_max=()","bitmap()","height()","new()","optimize!()","optimized?()","to_a()","to_a()","to_svg()","tolerance()","tolerance=()","trace()","turd_size()","turd_size=()","turn_policy()","turn_policy=()","unoptimize!()","width()","readme"],"longSearchIndex":["potracer","potracer::bitmap","potracer::params","potracer::trace","potracer::turnpolicy","potracer::params#alpha_max()","potracer::params#alpha_max=()","potracer::trace::bitmap()","potracer::bitmap#height()","potracer::bitmap::new()","potracer::params#optimize!()","potracer::params#optimized?()","potracer::bitmap#to_a()","potracer::trace#to_a()","potracer::trace#to_svg()","potracer::params#tolerance()","potracer::params#tolerance=()","potracer::trace#trace()","potracer::params#turd_size()","potracer::params#turd_size=()","potracer::params#turn_policy()","potracer::params#turn_policy=()","potracer::params#unoptimize!()","potracer::bitmap#width()",""],"info":[["Potracer","","Potracer.html","","<p>Define-module: Potracer A home for all things Potrace\n"],["Potracer::Bitmap","","Potracer/Bitmap.html","","<p>The Bitmap is Potracer's representation of a bitmap in memory\n"],["Potracer::Params","","Potracer/Params.html","","<p>Params define how the Bitmap is traced\n"],["Potracer::Trace","","Potracer/Trace.html","","<p>This class represents a trace of a Potracer::Bitmap\n"],["Potracer::Turnpolicy","","Potracer/Turnpolicy.html","","<p>The Turnpolicy determines how to resolve ambiguities during decomposition\nof bitmaps into paths.\n"],["alpha_max","Potracer::Params","Potracer/Params.html#method-i-alpha_max","()","<p>Get the current alpha max\n"],["alpha_max=","Potracer::Params","Potracer/Params.html#method-i-alpha_max-3D","(p1)","<p>Set the alpha max\n<p><code>max</code> - threshold for the detection of corners. It controls the\nsmoothness of the traced ...\n\n"],["bitmap","Potracer::Trace","Potracer/Trace.html#method-c-bitmap","(bmp, width=nil, height=nil, map='RGB', &block)","<p>Trace a bitmap\n<p>Attributes\n<p><code>bmp</code> - mapped to a Potracer::Bitmap either a multi-dimensional\narray of bits or ...\n"],["height","Potracer::Bitmap","Potracer/Bitmap.html#method-i-height","()","<p>Get the height in pixels\n"],["new","Potracer::Bitmap","Potracer/Bitmap.html#method-c-new","(*args)","<p>Creat a new Bitmap\n<p><code>width</code> - width of the bitmap to be traced\n<p><code>height</code> - height of the bitmap to be traced ...\n"],["optimize!","Potracer::Params","Potracer/Params.html#method-i-optimize-21","()","<p>Turn on curve optimization\n"],["optimized?","Potracer::Params","Potracer/Params.html#method-i-optimized-3F","()","<p>Are curves optimized\n"],["to_a","Potracer::Bitmap","Potracer/Bitmap.html#method-i-to_a","()","<p>Retrieve the bitmap data as a multi-dimensional array of 1s and 0s\n"],["to_a","Potracer::Trace","Potracer/Trace.html#method-i-to_a","()","<p>Convert the traced bitmap to an array in the form:\n\n<pre class=\"ruby\">[\n  {:<span class=\"ruby-identifier\">area=</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-value\">25</span>, :<span class=\"ruby-identifier\">sign=</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-string\">&quot;+&quot;</span>, :<span class=\"ruby-identifier\">parts=</span><span class=\"ruby-operator\">&gt;</span> [\n    [:<span class=\"ruby-identifier\">moveto</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_svg","Potracer::Trace","Potracer/Trace.html#method-i-to_svg","()","<p>Render the traced bitmap as an SVG\n<p>Example\n\n<pre>bmp = Potracer::Bitmap.new(5, 5, [\n  [1, 1, 1, 1, 1],\n  [1, ...</pre>\n"],["tolerance","Potracer::Params","Potracer/Params.html#method-i-tolerance","()","<p>Get current curve optimization tolerance\n"],["tolerance=","Potracer::Params","Potracer/Params.html#method-i-tolerance-3D","(p1)","<p>Set current curve optimization tolerance\n<p><code>amount</code> - defines the amount of error allowed in curve\nsimplification. ...\n\n"],["trace","Potracer::Trace","Potracer/Trace.html#method-i-trace","(bitmap=nil, params=nil, &block)","<p>Trace the given <code>bitmap</code>\n<p>Attributes\n<p><code>bitmap</code> - an instance of Potracer::Bitmap. If not given the\n+@bitmap+ ...\n"],["turd_size","Potracer::Params","Potracer/Params.html#method-i-turd_size","()","<p>Get the current turd size\n"],["turd_size=","Potracer::Params","Potracer/Params.html#method-i-turd_size-3D","(p1)","<p>Set the turd size\n<p><code>threshold</code> - used to \"despeckle\" the bitmap to be traced, by\nremoving all curves ...\n\n"],["turn_policy","Potracer::Params","Potracer/Params.html#method-i-turn_policy","()","<p>Get the current Turnpolicy\n"],["turn_policy=","Potracer::Params","Potracer/Params.html#method-i-turn_policy-3D","(p1)","<p>Set the current Turnpolicy\n"],["unoptimize!","Potracer::Params","Potracer/Params.html#method-i-unoptimize-21","()","<p>Turn off curve optimization\n"],["width","Potracer::Bitmap","Potracer/Bitmap.html#method-i-width","()","<p>Get the width in pixels\n"],["README","","README_rdoc.html","","<p>Introduction\n<p>Potracer is a wrapper for libpotrace.\n<p>About Potrace\n"]]}}